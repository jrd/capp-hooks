#!/usr/bin/env python3
from argparse import ArgumentParser
from pathlib import Path
from yaml import full_load
from json import load, dump
from typing import List, Dict

def get_links(compose_file: Path) -> Dict:
    def get_env(service: Dict) -> Dict:
        env_vars = service.get('environment', {})
        if isinstance(env_vars, list):
            env_vars = dict(
                [env_var.split('=', 1) for env_var in env_vars if '=' in env_var] +
                [(env_var, '') for env_var in env_vars if '=' not in env_var]
            )

        return env_vars.get('DOCKER_HOST', {})

    with open(compose_file) as f:
        dc = full_load(f)
        return {
            svc_name: get_env(svc_def)
            for (svc_name, svc_def) in dc.get('services', {}).items()
            if svc_name and get_env(svc_def)
        }

def write_json(app: str, environment: str, links: Dict, target_file: str) -> None:
    target_file = Path(target_file)
    if target_file.exists():
        with open(target_file) as f:
            data = load(f)
    else:
        data = {}
    
    for service, link in links.items():
        svc_name = f'{app}-{service}'
        if data.get(svc_name):
            data[svc_name][environment] = link
        else:
            data[svc_name] = {environment: link}

    with open(target_file, 'w') as f:
        dump(data, f, sort_keys=True)

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("app")
    parser.add_argument("environment")
    parser.add_argument("compose_file")
    parser.add_argument("target_file")
    parser.add_argument("remain", nargs='*')
    args = parser.parse_args()
    compose_file = Path(args.compose_file)
    if compose_file.exists():
        links = get_links(compose_file)
        write_json(args.app, args.environment, links, args.target_file)
