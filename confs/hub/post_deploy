#!/usr/bin/env python3
from argparse import ArgumentParser
from json import (
    dump,
    load,
)
from pathlib import Path
from typing import Dict

from yaml import full_load


def get_links(compose_file: Path) -> Dict:
    def get_virtual_host(service: Dict) -> Dict:
        env_vars = service.get('environment', {})
        if isinstance(env_vars, list):
            env_vars = dict(
                env_var.split('=', 1) if '=' in env_var else (env_var, '')
                for env_var in env_vars
            )
        vhost_str = env_vars.get('VIRTUAL_HOST', '')  # Can be a string of comma-separated vhosts
        return vhost_str.split(',')[0]
    with open(compose_file) as f:
        dc = full_load(f)
        return {k: v for k, v in {
            svc_name: get_virtual_host(svc_def)
            for (svc_name, svc_def) in dc.get('services', {}).items()
            if svc_name
        }.items() if v}


def write_json(is_deployed: bool, app: str, environment: str, links: Dict, target_file: Path) -> None:
    if target_file.exists():
        with open(target_file) as f:
            data = load(f)
    else:
        target_file.parent.mkdir(parents=True, exist_ok=True)
        data = {}
    for service, link in links.items():
        svc_name = f'{app}-{service}'
        if is_deployed:
            if svc_name in data:
                data[svc_name][environment] = link
            else:
                data[svc_name] = {environment: link}
        else:
            if svc_name in data:
                data[svc_name].pop(environment, None)
                if not data[svc_name]:
                    data.pop(svc_name)
    with open(target_file, 'w') as f:
        dump(data, f, sort_keys=True)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("type", choices=['deploy', 'undeploy'])
    parser.add_argument("app")
    parser.add_argument("environment")
    parser.add_argument("compose_file")
    parser.add_argument("target_file")
    args = parser.parse_args()
    compose_file = Path(args.compose_file)
    target_file = Path(args.target_file)
    if compose_file.exists():
        links = get_links(compose_file)
        write_json(args.type == 'deploy', args.app, args.environment, links, target_file)
